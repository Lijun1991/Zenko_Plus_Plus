{
  "_args": [
    [
      {
        "raw": "ioctl@2.0.0",
        "scope": null,
        "escapedName": "ioctl",
        "name": "ioctl",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "/nfs/2016/a/ahunt/Zenko_Plus_Plus/GCS/node_modules/arsenal"
    ]
  ],
  "_from": "ioctl@2.0.0",
  "_id": "ioctl@2.0.0",
  "_inCache": true,
  "_location": "/ioctl",
  "_nodeVersion": "6.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ioctl-2.0.0.tgz_1465390705341_0.9603566916193813"
  },
  "_npmUser": {
    "name": "sgimeno",
    "email": "santiago.gimeno@gmail.com"
  },
  "_npmVersion": "3.9.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ioctl@2.0.0",
    "scope": null,
    "escapedName": "ioctl",
    "name": "ioctl",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/arsenal"
  ],
  "_resolved": "https://registry.npmjs.org/ioctl/-/ioctl-2.0.0.tgz",
  "_shasum": "2aacbd73eb6ff9ad01fdf3ecc3390ee57781100e",
  "_shrinkwrap": null,
  "_spec": "ioctl@2.0.0",
  "_where": "/nfs/2016/a/ahunt/Zenko_Plus_Plus/GCS/node_modules/arsenal",
  "author": {
    "name": "Santiago Gimeno",
    "email": "santiago.gimeno@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/santigimeno/node-ioctl/issues"
  },
  "dependencies": {
    "bindings": "^1.1.1",
    "nan": "^2.3.2"
  },
  "description": "nodejs ioctl wrapper",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "2aacbd73eb6ff9ad01fdf3ecc3390ee57781100e",
    "tarball": "https://registry.npmjs.org/ioctl/-/ioctl-2.0.0.tgz"
  },
  "gitHead": "d4eb22767205a488124c0d71cf001a06747762ac",
  "gypfile": true,
  "homepage": "https://github.com/santigimeno/node-ioctl#readme",
  "keywords": [
    "ioctl",
    "syscall"
  ],
  "license": {
    "type": "ISC",
    "url": "https://github.com/santigimeno/node-ioctl/blob/master/LICENSE"
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "sgimeno",
      "email": "santiago.gimeno@gmail.com"
    }
  ],
  "name": "ioctl",
  "optionalDependencies": {},
  "readme": "node-ioctl\n==========\n\nnode ioctl wrapper\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install ioctl\n```\n\nAPI\n--------\n\n### ioctl(fileDescriptor, request, data)\n**Parameters**\n- **fileDescriptor**: `Integer` Target file descriptor, must be open.\n- **request**: `Integer` Device specific request code.\n- **data**: `Integer|Buffer` Request data.\n\n**Returns**: `Integer` Usually zero is returned, some calls use the return value as a output parameter\nand may return a positive integer.\n\n**Throws**: Throws on failed `ioctl` call.\n\nExamples\n--------\n\nRead bytes of the next pending datagram using FIONREAD.\nAs it takes a pointer as a parameter, it's straightforward using a Buffer as a parameter.\n\n```\nvar dgram = require('dgram');\nvar ioctl = require('ioctl');\n\nvar FIONREAD = 0x541B;\n\nvar s = dgram.createSocket('udp4');\ns.bind(1234, function(err) {\n    if (err) {\n        throw err;\n    }\n\n    var s1 = dgram.createSocket('udp4');\n    var message = new Buffer(\"Some bytes\");\n    s1.send(message, 0, message.length, 1234, \"localhost\", function(err, bytes) {\n        var length = new Buffer(4);\n        var ret = ioctl(s._handle.fd, FIONREAD, length);\n        console.log('Pending bytes: ' + length.readInt32LE(0));\n        s1.close();\n        s.close();\n    });\n});\n```\n\nFor other cases, involving complex structs, we can use the `ref`, `ref-array` and `ref-struct` modules.\n\n```\nvar fs = require('fs');\nvar ioctl = require('ioctl');\nvar ref = require('ref');\nvar ArrayType = require('ref-array');\nvar StructType = require('ref-struct');\n\nvar TTY = '/dev/tty1';\nvar TCGETA = 0x5405;\nvar TIOCEXCL = 0x540C;\n\n// #define NCC 8\n// struct termio {\n// unsigned short c_iflag; /* input mode flags */\n// unsigned short c_oflag; /* output mode flags */\n// unsigned short c_cflag; /* control mode flags */\n// unsigned short c_lflag; /* local mode flags */\n// unsigned char c_line; /* line discipline */\n// unsigned char c_cc[NCC]; /* control characters */\n// };\n\n// define the \"snd_hwdep_info\" struct type\nvar termio = StructType({\n    c_iflag : ref.types.ushort,\n    c_oflag : ref.types.ushort,\n    c_cflag : ref.types.ushort,\n    c_lflag : ref.types.ushort,\n    c_line : ref.types.uchar,\n    c_cc : ArrayType(ref.types.uchar, 8)\n});\n\nfs.open(TTY, 'r+', function(err, fd) {\n    if (err) {\n        throw err;\n    }\n\n    var info = new termio();\n    var ret = ioctl(fd, TCGETA, info.ref());\n    console.log('TCGETA ret: ' + ret);\n    console.log('c_iflag: ' + info.c_iflag);\n    console.log('c_oflag: ' + info.c_oflag);\n    console.log('c_cflag: ' + info.c_cflag);\n    console.log('c_lflag: ' + info.c_lflag);\n    console.log('c_line: ' + info.c_line);\n    console.log('c_cc: ' + info.c_cc.buffer.toString());\n    ret = ioctl(fd, TIOCEXCL);\n    console.log('TIOCEXCL ret: ' + ret);\n    fs.close(fd);\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/santigimeno/node-ioctl.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.0.0"
}

---

version: "3.1"

services:
  gcs-data:
    image: ach5910/zenko-plus-plus
    ports:
      - "9991"
    networks:
      - backend
    environment:
      S3DATAPATH: /data
      LISTEN_ADDR: 0.0.0.0
    secrets: 
      - gcs-credentials
    command: npm run start_dataserver
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == storage

  gcs-metadata:
    image: ach5910/zenko-plus-plus
    ports:
      - "9990"
    networks:
      - backend
    environment:
      S3METADATAPATH: /metadata
      LISTEN_ADDR: 0.0.0.0
    secrets: 
      - gcs-credentials
    command: npm run start_mdserver
    deploy:
      placement:
        constraints:
          - node.labels.io.zenko.type == storage
  s3-front:
    image: scality/s3server
    ports:
      - "8000"
    networks:
      - backend
      - frontend-dmz
    environment:
      DATA_HOST: gcs-data
      METADATA_HOST: gcs-metadata
      REDIS_HOST: cache
      ENDPOINT: "${ENDPOINT:-zenko}"
    secrets:
      - s3-credentials
    command: npm run start_s3server
    depends_on:
      - gcs-data
      - gcs-metadata
      - cache
    deploy:
      mode: replicated
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"

  cache:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - backend

  lb:
    image: zenko/loadbalancer
    ports:
      - "80:80"
    environment:
      LISTEN_PORT: 80
      UPSTREAM_SERVER: "s3-front:8000"
    networks:
      - frontend
      - frontend-dmz
    depends_on:
      - s3-front
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: "10s"
        monitor: "5s"

networks:
  backend:
  frontend:
  frontend-dmz:

secrets:
  s3-credentials:
    file: ./secrets.txt
  gcs-credentials:
    file: ./secrets.txt
